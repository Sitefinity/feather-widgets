@model Telerik.Sitefinity.Frontend.Forms.Mvc.Models.Fields.CheckboxesField.CheckboxesFieldViewModel

@using Telerik.Sitefinity.UI.MVC;
@using Telerik.Sitefinity.Frontend.Forms.Mvc.Helpers;
@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Modules.Pages;

@Html.Script(ScriptRef.JQuery, "top", false)

@{
    var fieldName = Model.MetaField.FieldName;
    var requiredAttributes = MvcHtmlString.Create(Model.ValidationAttributes);
}

<div class="@Model.CssClass" data-sf-role="checkboxes-field-container">
    <input type="hidden" data-sf-role="violation-messages" value='{ "required": "@Model.RequiredViolationMessage"}' />
    <input type="hidden" data-sf-role="required-validator" value='@Model.IsRequired' />
   
    <strong>@Model.MetaField.Title</strong>
    <p>@Model.MetaField.Description</p>
        
    @foreach (var choice in Model.Choices)
    {
		var selctedAttributes = !Model.IsRequired && !string.IsNullOrEmpty(Model.MetaField.DefaultValue) && Model.MetaField.DefaultValue.Contains(choice as string) ? "checked" : string.Empty;
        <div>
            <label>
                <input type="checkbox" name="@fieldName" value="@choice" data-sf-role="checkboxes-field-input" @selctedAttributes />
                @choice
            </label>
        </div>
    }

    @if(Model.HasOtherChoice)
    {
        <div>
            <label>
                <input type="checkbox" name="@fieldName" data-sf-checkboxes-role="other-choice-checkbox" data-sf-role="checkboxes-field-input"/>
                @Html.Resource("Other")
                <input type="hidden" data-sf-checkboxes-role="other-choice-text" />
            </label>
        </div>
    }
    
</div>

@Html.Script(Url.WidgetContent("Mvc/Scripts/CheckboxesField/checkboxes-field.js"), "bottom", false)