@model Telerik.Sitefinity.Frontend.Navigation.Mvc.Models.INavigationModel

@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Frontend.Navigation.Mvc.Models;
@using Telerik.Sitefinity.Modules.Pages;


<div class="@Model.CssClass">
    @Html.Action("GetView", new { viewName = "Dropdown",  model= Model})

    <ul id='@Html.UniqueId("navbar")'>
        @foreach (var node in Model.Nodes)
        {
            @RenderRootLevelNode(node);
        }
    </ul>
</div>

@*Here is specified the rendering for the root level*@
@helper RenderRootLevelNode(NodeViewModel node)
{
    if (node.ChildNodes.Count > 0)
    {
        <li>
            <a href="#" data-toggle="dropdown">@node.Title</a>
            <ul>
                @RenderSubLevelsRecursive(node)
            </ul>
        </li>
    }
    else
    {
        <li class="@GetClass(node)"><a href="@node.Url" target="@node.LinkTarget">@node.Title</a></li>
    }
}

@*Here is specified the rendering for all child levels*@
@helper RenderSubLevelsRecursive(NodeViewModel node)
{
    foreach (var childNode in node.ChildNodes)
    {
        if(childNode.ChildNodes.Count > 0)
        {
             <li>
                <a href="@childNode.Url" target="@childNode.LinkTarget">@childNode.Title</a>
                <ul>
                    @RenderSubLevelsRecursive(childNode)
                </ul>
            </li>
        }
        else
        {
            <li class="@GetClass(childNode)">
                <a href="@childNode.Url" target="@childNode.LinkTarget">@childNode.Title</a>
            </li>
        }
    }
}

@*Resolves the class that will be added for each node depending whether it is selected*@
@helper GetClass(NodeViewModel node)
{

    if (node.IsCurrentlyOpened)
    {
        @Html.HtmlSanitize("active");
    }
    else if (node.HasChildOpen)
    {
        @Html.HtmlSanitize("active");
    }
}

@*Add scripts and stylesheets*@
@Html.Script(Url.WidgetContent("Mvc/Scripts/Navigation.js"), "bottom", false)