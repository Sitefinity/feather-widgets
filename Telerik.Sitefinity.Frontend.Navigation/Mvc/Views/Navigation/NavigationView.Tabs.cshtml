@model Telerik.Sitefinity.Frontend.Navigation.Mvc.Models.INavigationModel

@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Frontend.Navigation.Mvc.Models;
@using Telerik.Sitefinity.Modules.Pages;



<div class="@Model.CssClass">
    @Html.Action("GetView", new { viewName = "Dropdown", model= Model})

    @RenderRootLevelNode(@Model.Nodes)
    @RenderSubLevelsRecursive(@Model.Nodes)
</div>

@*Here is specified the rendering for the root level*@
@helper RenderRootLevelNode(IList<NodeViewModel> nodes)
{
    <ul>
        @foreach(var node in nodes)
        {
            <li class="@GetClass(node)">
                <a href="@node.Url" target="@node.LinkTarget">@node.Title</a>
            </li>
        }
    </ul>
}

@*Here is specified the rendering for all child levels*@
@helper RenderSubLevelsRecursive(IList<NodeViewModel> nodes)
{
    var selectedNode = nodes.SingleOrDefault(node => node.IsCurrentlyOpened || node.HasChildOpen);

    if(selectedNode !=null)
    {
         <ul>
            @foreach (var node in selectedNode.ChildNodes)
            {
                <li class="@GetClass(node)">
                    <a href="@node.Url" target="@node.LinkTarget">@node.Title</a>
                </li>
            }
        </ul>
        @RenderSubLevelsRecursive(selectedNode.ChildNodes);
    }
}

@*Resolves the class that will be added for each node depending whether it is selected*@
@helper GetClass(NodeViewModel node)
{
    if (node.IsCurrentlyOpened)
    {
        @Html.HtmlSanitize("active");
    }
    else if (node.HasChildOpen)
    {
        @Html.HtmlSanitize("active");
    }
}

@*Add scripts and stylesheets*@
@Html.Script(Url.WidgetContent("Mvc/Scripts/Navigation.js"), "bottom", false)