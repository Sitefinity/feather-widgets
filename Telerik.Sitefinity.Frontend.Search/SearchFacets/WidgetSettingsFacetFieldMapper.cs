using System;
using System.Collections.Generic;
using System.Linq;
using Telerik.Sitefinity.Frontend.Search.Mvc.Models;
using Telerik.Sitefinity.Publishing.PublishingPoints;
using Telerik.Sitefinity.Search.Facets;

namespace Telerik.Sitefinity.Frontend.Search.SearchFacets
{
    internal class WidgetSettingsFacetFieldMapper
    {
        internal List<FacetField> MapWidgetSettingsToFieldsModel(IEnumerable<FacetWidgetFieldModel> selectedFacetsToBeUsed)
        {
            var facetFields = new List<FacetField>();
            foreach (var facet in selectedFacetsToBeUsed)
            {
                var facetFieldName = facet.FacetableFieldNames.FirstOrDefault();

                var settings = facet.FacetFieldSettings;

                if (facet.FacetFieldSettings.RangeType == SearchFacetExtensions.AutoGeneratedFacet)
                {
                    if (settings.IsValueFacet())
                    {
                        facetFields.Add(this.CreateValueFacetFieldModel(facetFieldName, settings));
                    }
                    else if (settings.FacetType == SearchIndexAdditonalFieldType.NumberWhole.ToString() ||
                             settings.FacetType == SearchIndexAdditonalFieldType.NumberDecimal.ToString())
                    {
                        facetFields.Add(this.CreateNumberIntervalFacetFieldModel(facetFieldName, settings));
                    }
                    else if (settings.FacetType == SearchIndexAdditonalFieldType.DateAndTime.ToString())
                    {
                        facetFields.Add(this.CreateDateIntervalFacetFieldModel(facetFieldName, settings));
                    }
                }
                else
                {
                    if (settings.FacetType == SearchIndexAdditonalFieldType.NumberWhole.ToString() ||
                        settings.FacetType == SearchIndexAdditonalFieldType.NumberDecimal.ToString())
                    {
                        facetFields.Add(this.CreateNumberRangeFacetFieldModel(facetFieldName, settings));
                    }
                    else if (settings.FacetType == SearchIndexAdditonalFieldType.DateAndTime.ToString())
                    {
                        facetFields.Add(this.CreateDateRangeFacetFieldModel(facetFieldName, settings));
                    }
                }
            }

            return facetFields;
        }

        internal string GetIntervalDateTime(string dateStep)
        {
            if (!dateStep.IsNullOrEmpty())
            {
                switch (dateStep)
                {
                    case "0":
                        return "day";
                    case "1":
                        return "week";
                    case "2":
                        return "month";
                    case "3":
                        return "quarter";
                    case "4":
                        return "year";
                }
            }

            // UX: if there is no step specified we fallback to a day interval.
            return "day";
        }

        private FacetField CreateDateRangeFacetFieldModel(string facetFieldName, FacetFieldSettings settings)
        {
            var rangeList = new List<CustomFacetRange>();
            foreach (var range in settings.DateRanges)
            {
                var valueFrom = range.From.HasValue ? range.From.Value.ToUniversalTime().ToString(DateTimeFormat) : null;
                var valueTo = range.To.HasValue ? range.To.Value.ToUniversalTime().ToString(DateTimeFormat) : null;

                if (valueFrom != null && valueTo != null)
                {
                    rangeList.Add(new CustomFacetRange() { From = valueFrom, To = valueTo });
                }
            }

            return new FacetField()
            {
                FieldName = facetFieldName,
                CustomIntervals = new List<CustomFacetRange>(rangeList),
                FacetFieldType = settings.FacetType,
                SitefinityFacetType = SitefinityFacetType.Range
            };
        }

        private FacetField CreateNumberRangeFacetFieldModel(string facetFieldName, FacetFieldSettings settings)
        {
            var rangeList = new List<CustomFacetRange>();
            if (settings.NumberRanges != null)
            {
                rangeList.AddRange(
                    settings
                    .NumberRanges
                    .Select(range => new CustomFacetRange() { From = range.From.ToString(), To = range.To.ToString() })
                    );
            }

            if (settings.NumberRangesDecimal != null)
            {
                rangeList.AddRange(
                    settings
                    .NumberRangesDecimal
                    .Select(range => new CustomFacetRange() { From = range.From.ToString(), To = range.To.ToString() })
                    );
            }

            return new FacetField()
            {
                FieldName = facetFieldName,
                CustomIntervals = new List<CustomFacetRange>(rangeList),
                FacetFieldType = settings.FacetType,
                SitefinityFacetType = SitefinityFacetType.Range
            };
        }

        private FacetField CreateDateIntervalFacetFieldModel(string facetFieldName, FacetFieldSettings settings)
        {
            return new FacetField()
            {
                FieldName = facetFieldName,
                IntervalRange = this.GetIntervalDateTime(settings.DateStep),
                FacetFieldType = settings.FacetType,
                SitefinityFacetType = SitefinityFacetType.Interval
            };
        }

        private FacetField CreateNumberIntervalFacetFieldModel(string facetFieldName, FacetFieldSettings settings)
        {
            return new FacetField()
            {
                FieldName = facetFieldName,
                IntervalRange = settings.NumberStep.ToString(),
                FacetFieldType = settings.FacetType,
                SitefinityFacetType = SitefinityFacetType.Interval
            };
        }

        private FacetField CreateValueFacetFieldModel(string facetFieldName, FacetFieldSettings settings)
        {
            return new FacetField()
            {
                FieldName = facetFieldName,
                SitefinityFacetType = SitefinityFacetType.Value,
                FacetFieldType = settings.FacetType
            };
        }

        internal const string DateTimeFormat = "yyyy-MM-ddTHH:mm:ss.fffZ";
    }
}
