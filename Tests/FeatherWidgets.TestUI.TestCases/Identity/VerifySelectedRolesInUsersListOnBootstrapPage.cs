using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Feather.Widgets.TestUI.Framework;
using Feather.Widgets.TestUI.Framework.Framework.Wrappers.Backend.Widgets;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Telerik.Sitefinity.Frontend.TestUtilities;

namespace FeatherWidgets.TestUI.TestCases.Identity
{
    /// <summary>
    /// VerifySelectedRolesInUsersListOnBootstrapPage_ test class.
    /// </summary>
    [TestClass]
    public class VerifySelectedRolesInUsersListOnBootstrapPage_ : FeatherTestCase
    {
        /// <summary>
        /// UI test VerifySelectedRolesInUsersListOnBootstrapPage
        /// </summary>
        [TestMethod,
        Owner(FeatherTeams.FeatherTeam),
        TestCategory(FeatherTestCategories.PagesAndContent),
        TestCategory(FeatherTestCategories.UsersList),
        TestCategory(FeatherTestCategories.Selectors),
        TestCategory(FeatherTestCategories.Bootstrap)]
        public void VerifySelectedRolesInUsersListOnBootstrapPage()
        {
            BAT.Macros().NavigateTo().Pages(this.Culture);
            BAT.Wrappers().Backend().Pages().PagesWrapper().OpenPageZoneEditor(PageName);
            BATFeather.Wrappers().Backend().Pages().PageZoneEditorWrapper().EditWidget(WidgetName);

            BATFeather.Wrappers().Backend().Widgets().WidgetDesignerWrapper().SelectRadioButtonOption(WidgetDesignerRadioButtonIds.filterUsers);
            BATFeather.Wrappers().Backend().Widgets().WidgetDesignerWrapper().ClickSelectButton(1);
            BATFeather.Wrappers().Backend().Identity().UsersListWrapper().VerifyRolesProviderOptions();
            BATFeather.Wrappers().Backend().Identity().UsersListWrapper().SelectProvider(UserProvider);
            BATFeather.Wrappers().Backend().Widgets().SelectorsWrapper().SelectItemsInFlatSelector(RoleToFilter);
            BATFeather.Wrappers().Backend().Widgets().SelectorsWrapper().DoneSelecting();

            BATFeather.Wrappers().Backend().Widgets().WidgetDesignerWrapper().SwitchToSingleItemSettingsTab();
            BATFeather.Wrappers().Backend().Widgets().WidgetDesignerWrapper().SelectAutoGeneratedPage();

            BATFeather.Wrappers().Backend().Widgets().WidgetDesignerWrapper().SaveChanges();
            BAT.Wrappers().Backend().Pages().PageZoneEditorWrapper().PublishPage();

            BAT.Macros().NavigateTo().CustomPage("~/" + PageName.ToLower(), false, this.Culture);
            BATFeather.Wrappers().Frontend().Identity().UsersListWrapper().VerifyUsersListOnBootstrapPage(this.users);
            BATFeather.Wrappers().Frontend().Identity().UsersListWrapper().VerifySingleUserOnBootstrapPage(UserFirstLastName, UserEmail, SingleUserPageURLEnding);
        }

        /// <summary>
        /// Performs Server Setup and prepare the system with needed data.
        /// </summary>
        protected override void ServerSetup()
        {
            BAT.Macros().User().EnsureAdminLoggedIn();
            BAT.Arrange(this.TestName).ExecuteSetUp();
        }

        /// <summary>
        /// Performs clean up and clears all data created by the test.
        /// </summary>
        protected override void ServerCleanup()
        {
            BAT.Arrange(this.TestName).ExecuteTearDown();
        }

        private const string PageName = "UsersListPage";
        private const string SingleUserPageURLEnding = "userslistpage/admin";
        private const string WidgetName = "Users list";
        private const string UserProvider = "All Roles";
        private const string RoleToFilter = "Administrators";
        private const string UserFirstLastName = "admin admin";
        private const string UserEmail = "dadasda@dasd.fdf";
        private const string AdminUserName = "admin";

        private readonly string[] users = new string[] { "admin admin", "admin2 admin2" };
    }
}
